ruby:
  # {trace:rootName = "foo" } >> { kind = server } | select(nestedSetLeft, nestedSetRight, nestedSetParent)
  # { resource.deployment.environment="#{params[:stack]}" && name=~".*" &&  status=error}&& { }  | select( kind, status, .service_name, .node_id, .component, span.http.status.code, span.http.target )
  # { event:name != "" }

  _range = 60 * 60
  ps = Async { JSON `docker ps #{@calc_size} --filter "label=com.docker.swarm.service.name=grafana_grafana" --format '{{.ID}}' | xargs -r docker inspect #{@calc_size_inspect} 2>&1 | jq -s ` }
  ps = ps.wait.first&.group_by { _1.dig 'Config', 'Labels', 'com.docker.swarm.task.id' }&.transform_values(&:first) || {}
  service_errors = []

  con = ps.first.last
  if con
    #traces = `docker exec #{con['Id']} curl -G -s  http://tempo:3200/api/search --data-urlencode 'tags=service.name=#{params[:service]}' --data-urlencode 'q={ .deployment.environment = "map-back" }' --data-urlencode limit=100 2>&1`
    query = {
            q: %[{ resource.deployment.environment="#{params[:stack]}" && event:name = "exception" } | select( kind, status, resource.service.name, event.exception.message ) ],
            start: (Time.now - _range).to_i, end: Time.now.to_i, limit: 1000, spss: 100
    }
    traces = `docker exec #{con['Id']} curl -G -s  http://tempo:3200/api/search  #{ query.map { |k,v| "--data-urlencode '#{k}=#{v}' " }.join ' ' } 2>&1`
    begin
      traces_ = JSON traces, symbolize_names: true
    rescue
      next traces
    end
    traces_[:traces]&.each do |t|
      t[:spanSet][:spans]&.each do |s|
        s[:attributes] = s[:attributes].map{ [_1[:key], _1[:value][:stringValue] ]}.to_h
        service_errors << s
      end
    end
  end


  service_errors = service_errors.group_by { "#{_1[:attributes]['service.name']} #{_1[:attributes]['exception.message']}" }.map { |k,v| v.first.merge(count: v.size) }
  service_errors.each { |s|
    s[:attributes]['service.name'].gsub!(/^#{params[:stack]}_/, &->(s) { "<span class='stack_name'>#{s}</span>" })
  }

sass:
  .has_errors
    background: #ff00000d
h2 class=( service_errors.size > 0 ? 'has_errors' : nil)
  | Exceptions
  span.time.ago =(Time.now  - _range).utc

/ pre#traces = JSON.pretty_generate(service_errors)
table
  tr
    th Service
    th Count
    th Exception
    th Time
    th Duration
    th SpanID

  - service_errors.each do |s|
    tr
      td == s[:attributes]['service.name']
      td = s[:count]
      td.full = s[:attributes]['exception.message']
      td.time = Time.at(s[:startTimeUnixNano].to_i / 1_000_000_000).utc
      td = "#{s[:durationNanos].to_i / 1_000_000_000.0}s"
      td = s[:spanID]

