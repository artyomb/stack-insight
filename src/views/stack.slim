ruby:
  ps = Async { JSON `docker ps --filter "label=com.docker.stack.namespace=#{params[:stack]}" --format '{{.ID}}' | xargs docker inspect 2>&1` }
  sps = Async { JSON `docker stack ps #{params[:stack]} --no-trunc --format "{{json .}}" | jq --arg stack "{}" '. + {Stack: $stack}' | jq -s . 2>&1` }
  services = Async { JSON `docker service ls --filter label=com.docker.stack.namespace=#{params[:stack]} --format '{{json . }}' | jq -s . 2>&1` }

  ps = ps.wait.group_by { _1.dig 'Config', 'Labels', 'com.docker.swarm.task.id' }.transform_values(&:first)
  sps = sps.wait.group_by { _1['Name'] }
  services = services.wait
  # services = JSON `docker service inspect $(docker service ls -q --filter label=com.docker.stack.namespace=#{params[:stack]}) 2>&1`
  columns = %w[NameT Image Image\ Created Mode Replicas CurrentState]
  services.each { |s|
    s['NameT'] = s['Name'].gsub(/^#{params[:stack]}_/, &->(s) { "<span class='stack_name'>#{s}</span>" })

    svc = sps[s['Name'] + '.1']&.first
    next unless svc

    s['CurrentState'] = svc['CurrentState'] rescue 'n/a'
    con = s['Container'] = ps[svc['ID']] rescue 'n/a' # First replica, running task container
    s['Image'] += "<span class='sha256'>@" + con['Image'][0..15] + "</span>" if con
    s['Image Created'] = con&.dig 'Config', 'Labels', 'org.opencontainers.image.created' if con
    # com.gitlab.ci.pipelineurl
  }

h1 Stack: #{params[:stack]}

pre: table
  - columns.each do |k|
    th = k
  th Actions
  - services.each do |s|
    tr
      - columns.each do |c|
        td == s[c]
      td
        a.action href="ps/?service=#{s['Name']}" ps
        a.action href="inspect/?service=#{s['Name']}" inspect
        a.action href="logs/?service=#{s['Name']}" logs
        a.action href="update/?service=#{s['Name']}" onclick="return confirm('Are you sure to Pull and Update?')" update

