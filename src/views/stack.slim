ruby:
  otl_current_span { _1.add_attributes stack: params[:stack] }

  service_errors = Async do
    otl_span(:espans) {
      _range = 60 * 60
      ps = Async { JSON `docker ps #{@calc_size} --filter "label=com.docker.swarm.service.name=grafana_grafana" --format '{{.ID}}' | xargs -r docker inspect #{@calc_size_inspect} 2>&1 | jq -s ` }
      ps = ps.wait.first&.group_by { _1.dig 'Config', 'Labels', 'com.docker.swarm.task.id' }&.transform_values(&:first) || {}
      service_errors_ = Hash.new(0)

      con = ps.first.last
      if con
        query = { q: %[{ resource.deployment.environment="#{params[:stack]}" && name=~".*" &&  status=error}],
                  start: (Time.now - _range).to_i, end: Time.now.to_i, limit: 200, spss: 1 }
        traces = `docker exec #{con['Id']} curl -G -s  http://tempo:3200/api/search  #{ query.map { |k, v| "--data-urlencode '#{k}=#{v}' " }.join ' ' } 2>&1`
        traces_ = JSON traces, symbolize_names: true rescue traces
        traces_[:traces]&.each do |t|
          t[:serviceStats]&.each do |name, s|
            if s[:errorCount].to_i > 0
              service_errors_[name] += s[:errorCount]
            end
          end
        end
        service_errors_
      end
    }
  rescue =>e
    Hash.new(0)
  end

  $container_images_cache ||= {}
  ps = Async { otl_span(:ps) { JSON `docker ps #{@calc_size} --filter "label=com.docker.stack.namespace=#{params[:stack]}" --format '{{.ID}}' | xargs -r docker inspect #{@calc_size_inspect} 2>&1 | jq -s ` } }
  sps = Async { otl_span(:sps) { JSON `docker stack ps #{params[:stack]} --no-trunc --format "{{json .}}" | jq --arg stack "{}" '. + {Stack: $stack}' | jq -s . 2>&1` } }
  services = Async { otl_span(:services) { JSON `docker service ls --filter label=com.docker.stack.namespace=#{params[:stack]} --format '{{json . }}' | jq -s . 2>&1` } }
  services_i = Async { otl_span(:services_i) { JSON `docker stack services #{params[:stack]} --format '{{.Name}}' | xargs -P 10 -r -I{} docker service inspect {} --format '{{json . }}' | jq -s . 2>&1` } }
  description = Async { otl_span(:description) { `docker config inspect --format '{{json .Spec.Data}}' #{params[:stack]}_readme | jq -r . | base64 -d`.strip } }
  tempo_page = Async { slim :tempo }.wait
  metrics_page = Async { slim :metrics }.wait

  ps = ps.wait.first&.group_by { _1.dig 'Config', 'Labels', 'com.docker.swarm.task.id' }&.transform_values(&:first) || {}
  sps = sps.wait.group_by { _1['Name'][/(.*)\./, 1] }
  services = services.wait
  services_i = services_i.wait.group_by { _1['Spec']['Name'] }.transform_values(&:first)
  # services = JSON `docker service inspect $(docker service ls -q --filter label=com.docker.stack.namespace=#{params[:stack]}) 2>&1`

  number_to_human_size = ->(i) {
    units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB']
    size = i.to_f
    unit = 0

    while size > 1024 && unit < units.length - 1
      size /= 1024
      unit += 1
    end

    "#{format('%.2f', size).sub(/\.?0+$/, '')} #{units[unit]}"
  }

  service_errors = service_errors.wait

  columns = %w[NameT Image Image\ Age Version Commit Replicas RPS ESpans Container\ Size CurrentState]
  services.map { |s|
    Async do
      si = services_i[s['Name']]
      spec = si['Spec']
      s['NameT'] = s['Name'].gsub(/^#{params[:stack]}_/, &->(s) { "<span class='stack_name'>#{s}</span>" })
      s['TitleImage'] = s['Image']
      s['Image'] = s['Image'].gsub(/:([^:]+)$/, ':<span class="label">\1</span>')

      svc = sps[s['Name']]&.first
      svc_prev = sps[s['Name']]&.at(1)
      next unless svc

      s['CurrentState'] = svc['CurrentState'] rescue 'n/a'

      s['ESpans'] = service_errors[s['Name'].to_sym]
      if s['ESpans'].to_i > 0
        s['TdKlassESpans'] = 'error'
      else
        s['ESpans'] = ''
      end

      s['Restart Condition'] = spec.dig 'TaskTemplate', 'RestartPolicy', 'Condition'
      c,r = s['Replicas'].split('/')

      if c.to_i == 0 && s['Restart Condition'] == 'on-failure'
        s['Klass'] = 'not_running'
      end

      unless !svc_prev || svc_prev['Error'].empty?
        if c != r
          s['Klass'] = 'error_prev'
          s['CurrentState'] += ' > ' + svc_prev['Error']
        end
      end

      unless svc['Error']&.empty?
        s['Klass'] = 'error'
        s['CurrentState'] = svc['Error']
      end

      s['Replicas'] += ' g' if s['Mode'] == 'global'
      s['Replicas'] += ' :' + s['Restart Condition']

      con = s['Container'] = ps[svc['ID']] rescue 'n/a' # First replica, running task container
      if con
        labels = si.dig( 'Spec', 'Labels')
        port = labels.find { |l,v| l =~ /traefik.*.loadbalancer.server.port/ }
        if port
          otl_span(:metrics) {
            port = port.last.to_i
            metrics_txt = `docker exec #{con['Id']} curl -f -q localhost:#{port}/metrics`
            if metrics_txt.lines.first =~ /^# TYPE/
              metrics = PrometheusParser.parse_metrics(metrics_txt)
              rps = metrics[:http_server_request_duration_seconds][:series].map { |s| [ s[:labels][:path], s[:sum]/s[:count] ] }
              s['RPS'] = rps.map { _1[1] }.max&.round(4) || 0
            end
          }
        end

        image = $container_images_cache[con['Image']] ||= JSON(`docker image inspect #{con['Image']}`)[0]
        c_digests = image['RepoDigests'].map { _1[/sha256:.{64}/] }
        version = image.dig('Config', 'Labels', 'org.opencontainers.image.version')
        i_created = image['Created']

        created = Time.parse con['Created']
        if ( Time.now.utc - created.utc < 60*60*6) && s['Klass'].nil?
          s['Klass'] = 'new'
        end

        #docker_image_full_name_with_subdir_name = _1['Image']
        #cut_domain = docker_image_full_name_with_subdir_name[/^(?:[^\/]*\.)?[^\/]+\/(.+)$/, 2]
        s['Image'] = s['Image'][/^(?:(?<domain>[^\/]+\.[^\/]+(?::\d+)?)[\/])?(?<name>.+)$/,2] || ''

        #s['Image'] += "<span class='sha256'>@" + c_digests.map{ _1[0..15] }.join(',') + "...</span>"

        s['Image Age'] = con.dig 'Config', 'Labels', 'org.opencontainers.image.created'
        s['Image Age'] ||= i_created
        s['TdKlassImage Age'] = 'time'

        s['Version'] = con.dig('Config', 'Labels', 'org.opencontainers.image.version') ||
                       con.dig('Config', 'Labels', 'org.label-schema.version')

        s['LinkVersion'] = con.dig('Config', 'Labels', 'com.gitlab.ci.pipelineurl')

        s['LinkVersion'] ||= con.dig('Config', 'Labels', 'org.opencontainers.image.source')

        s['Version'] ||= 'n/a' if s['LinkVersion']

        s['Commit'] = con.dig('Config', 'Labels', 'com.gitlab.ci.commit_message')

        s['Container Size'] = con.dig('SizeRw') # "SizeRw": 16828757,    "SizeRootFs" : 328033441,
        # convert to human readable
        # undefined method `human_size' for an instance of Integer
        s['Container Size'] = number_to_human_size.call s['Container Size']
      end

      #s['Networks'] = con.dig('NetworkSettings', 'Networks').keys.join(', ') if con
      # com.gitlab.ci.pipelineurl
    rescue =>e
      s['Error'] = e.message
      puts "Exception: services.map Async >> #{s['Name']} : #{e.message}\n, #{e.backtrace.join("\n")}"
    end
  }.map(&:wait)

h1 Stack: #{params[:stack]}
pre.description = description.wait

pre: table
  - columns.each do |k|
    th = k
  th Actions
  - services.each do |s|
    tr class=s['Klass']
      - if s['Error']
        td = s['Error']
      - columns.each do |c|
        td class=(c.downcase + ' ' + s["TdKlass#{c}"].to_s) title=s["Title#{c}"]
          -if s["Link#{c}"]
            a href=s["Link#{c}"] == s[c]
          - else
            == s[c]
      td
        a.action href="ps/?service=#{s['Name']}" title="ps" P
        a.action href="inspect/?service=#{s['Name']}" title="Inspect" I
        a.action href="logs/?service=#{s['Name']}" title="Logs" L
        a.action href="update/?service=#{s['Name']}" onclick="return confirm('Are you sure to Pull and Update \n#{s['Name']}?')" title="Update" U

== tempo_page
== metrics_page

sass:
  a
    color: #2e54b9
    text-decoration: none
    &:hover
      text-decoration: underline

  span.label
    background: #bfe3e8
    border-radius: 5px
    padding: 0 0.3em
  .currentstate
    max-width: 15em
  tr.not_running
    background: rgba(182, 182, 182, 0.2)
  tr.new
    background: rgba(116, 255, 31, 0.15)
  tr.error
    background: rgba(255, 0, 0, 0.15)
  td.error
    background: #ff00008f
  tr.error_prev
    background: rgba(255, 0, 0, 0.07)
  .time
    //span
    //  margin-left: 1em
    .old
      opacity: 0.4
    .recent
      background: #fff80026

