ruby:
  dinfo = JSON `docker info --format "{{json .}}"`

doctype html
html
  head
    link rel="icon" type="image/svg+xml" href='data:image/svg+xml,#{favicon.gsub('"','%22').gsub("#",'%23')}'
    meta[charset="utf-8"]
    title = dinfo['Name']
    meta[name="viewport" content="width=device-width, initial-scale=1.0"]
    / link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&family=Titillium+Web:ital,wght@0,200;0,300;0,400;0,600;0,700;0,900;1,200;1,300;1,400;1,600;1,700&display=swap" rel="stylesheet"
    link href="/fonts/jet_brains_mono.css" rel="stylesheet"
    sass:
      body1
        background-color: black
        color: white
      .action
        margin-right: 0.6em
      .sha256, .stack_name, .container_name
        opacity: 0.5
        margin-left: 0.3em
      .description
        background: #f6f6f6
      table
        width: 100%
        border-collapse: collapse
        tr:hover
          background: antiquewhite
        td, th
          padding-right: 1em
          text-align: left
          white-space: nowrap
          max-width: 18vw
          overflow: hidden
          text-overflow: ellipsis
          //word-wrap: break-word
          //word-break: break-all
          &.full
            white-space: normal
            overflow: auto
            text-overflow: initial

      h1,h2
        span
          font-size: 0.9rem
          margin-left: 0.3em

      html, pre
        font-family: "JetBrains Mono", monospace
      body
        nav
          margin: -0.5em
          background: #ededed
          a
            font-size: 1.5em
            text-decoration: none
            &:hover
              text-decoration: underline
          .time
          .version
            margin-right: 4em

      .local_time
        display: none


  body
    nav style="display: flex; justify-content: space-between; padding: 1em;"
      a.home-link href="#" #Home
      .name
        |  #{dinfo['Name']} (#{dinfo['OperatingSystem']})
        |  #{dinfo['NCPU']}:CPU, #{dinfo['MemTotal'].to_i / (1024*1024*1024) }:RAM, #{dinfo.dig('Swarm', 'Nodes')}:Nodes
      .right
        span.version = "v" + (ENV['ORG_OPENCONTAINERS_IMAGE_VERSION'] || '<local run>')
        span = Time.now

    javascript:
      if (!location.href.includes('?') && !location.href.endsWith('/')) { location.href = location.href + '/'; }

      const BASE_PATH = window.location.pathname.match(/(.*insight)/)?.[1] || '';
      const home = document.querySelector('a.home-link');
      home.href = BASE_PATH + '/';

    == yield

    javascript:
      const list = document.querySelectorAll('.created, .time');
      list.forEach(function (e) {
        if (!e.innerText) return;

        const t = new Date(e.innerText);
        const now = new Date();
        const diffSeconds = Math.floor((now - t) / 1000);
        e.innerText = '';

        let local_time = e.appendChild(document.createElement('span'));
        local_time.classList.add('local_time');

        local_time.innerText = t.toLocaleString('en-US', {
          year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit'
        });

        const timeUnits = [[86400, 'd'], [3600, 'h'], [60, 'm'], [1, 's']];

        let remaining = diffSeconds;
        const ago = timeUnits.reduce((acc, [sec, unit]) => {
          const val = Math.floor(remaining / sec);
          remaining %= sec;
          if (val === 0) return acc;
          if (sec === 60 && diffSeconds >= 86400) return acc;
          if (sec === 1 && diffSeconds >= 86400) return acc;
          return acc + val + unit + ' ';
        }, '').trim();

        let ago_span = e.appendChild(document.createElement('span'));
        ago_span.setAttribute('title', local_time.innerText);
        if (diffSeconds < 86400)
          ago_span.classList.add('recent');
        else
          ago_span.classList.add('old');

        ago_span.innerText = `${ago}`;
      });
