ruby:
  sps = Async { JSON `docker stack ls --format '{{.Name}}' | xargs -I{} sh -c 'docker stack ps {} --no-trunc --format "{{json .}}" | jq --arg stack "{}" '. + {Stack: $stack}''  | jq -s . 2>&1`  }
  stack_ls = Async { JSON `docker stack ls --format '{{json .}}' | jq -s . 2>&1` }
  ps = Async{ JSON `docker ps --no-trunc --format '{{json .}}' | jq -s . 2>&1` }
  services = Async { JSON `docker service ls --format '{{json . }}' | jq -s . 2>&1` }

  columns = %w[ID Command Image Names Status]

  stack_ls = stack_ls.wait
  sps = sps.wait.group_by { _1['Name'] }

  services = services.wait
  services.each { _1['NameT'] = _1['Name'].gsub(/^[^_]+_/, &->(s) { "<span class='stack_name'>#{s}</span>" }) }
  services.each { _1['CurrentState'] = sps[_1['Name'] + '.1']&.first['CurrentState'] rescue 'n/a' }

  ps = ps.wait
  ps.each {
    _1['ID'] = _1['ID'][0..12]
    _1['Image'] = _1['Image'].gsub(/@sha256:.*/, &->(s) { "<span class='sha256'>#{s}</span>" })
    _1['Names'] = _1['Names'].gsub(/\.\d+\..*/, &->(s) { "<span class='container_name'>#{s}</span>" })
  }

h1 Stack Insight: #{params[:stack]}
pre: ul
  - stack_ls.each do |s|
    li : a href="stack?stack=#{s['Name']}" #{s['Name']}  (#{s['Services']})

h2 Docker stack ls
- scolumns = %w[NameT Image Mode Replicas CurrentState]

pre: table
  - scolumns.each do |k|
    th = k
  th Actions
  - services.each do |s|
    tr
      - scolumns.each do |c|
        td == s[c]
      td
        a.action href="inspect/?service=#{s['Name']}" inspect
        a.action href="logs/?service=#{s['Name']}" logs
        a.action href="update/?service=#{s['Name']}" onclick="return confirm('Are you sure to Pull and Update?')" update

h2 Docker ps
pre: table
  - columns.each do |k|
    th = k
  - ps.each do |p|
    tr
      - columns.each do |c|
        td == p[c]
