ruby:
  _range = 60 * 60

  _ps = Async { JSON `docker ps --filter "label=com.docker.swarm.service.name=grafana_grafana" --format '{{.ID}}' | xargs -r docker inspect -s 2>&1 | jq -s ` }
  _ps = _ps.wait.first&.group_by { _1.dig 'Config', 'Labels', 'com.docker.swarm.task.id' }&.transform_values(&:first) || {}
  _metrics = []

  _con = _ps.first.last
  if _con
    query ={
            query: %(topk(25, sum by (service,code,method,router,xforwardedhost,xrequestpath)(increase(traefik_router_requests_total{service=~"#{params[:stack]}.*"}[#{_range}s])) > 0)),
            #query: %(topk(25, sum by (service,code,router,xrequesthost,xrequestpath)(rate(traefik_router_requests_total{service=~"map-back.*"}[#{range}s])) > 0)),
            # sum(increase(traefik_service_requests_total{service=~"map-back_grib.*"}[5m]))
            start: (Time.now  - _range).to_i, end: Time.now.to_i,
            step: "#{_range}s"
    }
    metrics_txt = `docker exec #{_con['Id']} curl -G -L -s http://prometheus:9090/api/v1/query_range  #{ query.map { |k, v| "--data-urlencode '#{k}=#{v}' " }.join ' ' } 2>&1`
    begin
      metrics_ = JSON metrics_txt, symbolize_names: true
    rescue
      halt metrics_txt
    end

    metrics_[:data][:result].map do |r|
      _metrics << r[:metric].merge(count: r[:values][0][1].to_i)
    end
    _metrics.sort_by! { -_1[:count] }
  end
sass:
  //.ok
    //background: green
  .redirect
    background: rgba(0, 0, 255, 0.19)
  .client_error
    background: rgba(255, 208, 0, 0.19)
  .server_error
    background: rgba(255, 0, 0, 0.2)


h2
  | Requests
  span.time.ago =(Time.now  - _range).utc

/ pre#logs = JSON.pretty_generate metrics
table
  tr
    th Count
    th Code
    th Method
    th Service
    th Router
    th Host
    th Path
  tr
    - _metrics.each do |m|
      ruby:
        code = m[:code].to_i
        css_klass = case code
          when 200..299 then 'ok'
          when 300..399 then 'redirect'
          when 400..499 then 'client_error'
          when 500..599 then 'server_error'
        end

      tr class=css_klass
        td = m[:count]
        td = m[:code]
        td = m[:method]
        td = m[:service]
        td = m[:router]
        td = m[:xforwardedhost]
        td = m[:xrequestpath]

