/ registry-1.docker.io
/ auth.docker.io

h1 Update Service: #{params[:service]}
- image =`docker service inspect #{params[:service]} --format '{{.Spec.TaskTemplate.ContainerSpec.Image}}'`
- image = image.gsub(/@sha256:.*/, '').strip
- ps = Async { JSON `docker ps #{@calc_size} --filter "label=com.docker.swarm.service.name=#{params[:service]}" --format '{{.ID}}' | xargs -r docker inspect #{@calc_size_inspect} 2>&1 | jq -s` }
- ps = ps.wait.first
- container_is_outdated = false

h2 Docker pull image: #{image}
- pull = `docker pull #{image} 2>&1 | tee`
- image_digest = pull[/Digest: (sha256:.{64})/, 1]

pre = pull

- if pull =~ /Image is up to date /
  h2 Image is up to date
  pre
    p current image digest: #{image_digest}
    - ps.each do |c|
      - c_digest = JSON(`docker image inspect #{c['Image']}`)[0]['RepoDigests'][0][/sha256:.{64}/]
      p container [#{c.dig('Config', 'Labels', 'com.docker.swarm.task.name')}] digest: #{c_digest}
      - if c_digest != image_digest
        - container_is_outdated = true
        p: b container is outdated


- if pull =~ /Downloaded newer image/ || container_is_outdated
  h2 Update service
  pre = `docker service update --with-registry-auth --force #{params[:service]} --image "#{image}@#{image_digest}" --no-resolve-image 2>&1 | grep -vE '\[.*=>.*\]'`
  h2 Docker ps (current Node)
  - ps = `docker ps #{@calc_size} --no-trunc 2>&1 | grep #{params[:service]}`.gsub /\s+/, ' '
  pre = ps
  h2 Docker service ps
  pre = `docker service ps --no-trunc #{params[:service]} 2>&1`
